package cc.unknown.module.impl.exploit.disablers;

import java.util.ArrayList;
import java.util.List;

import cc.unknown.event.Listener;
import cc.unknown.event.annotations.EventLink;
import cc.unknown.event.impl.netty.PacketSendEvent;
import cc.unknown.event.impl.player.PreUpdateEvent;
import cc.unknown.module.impl.exploit.Disabler;
import cc.unknown.util.chat.ChatUtil;
import cc.unknown.util.packet.PacketUtil;
import cc.unknown.value.Mode;
import cc.unknown.value.impl.NumberValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

public class ExperimentalDisabler extends Mode<Disabler> {

    private final NumberValue ticksToDelay = new NumberValue("Ticks", this, 5, 1, 20, 1);

    public List<Packet<?>> packetList = new ArrayList<>();

    public ExperimentalDisabler(String name, Disabler parent) {
        super(name, parent);
    }

    @EventLink
    public final Listener<PacketSendEvent> packetSendEventListener = event -> {
        Packet<?> packet = event.getPacket();
        if (!getParent().deprecated.getValue()) {
            return;
        }

        if (packet instanceof C0FPacketConfirmTransaction) {
            packetList.add(packet);
            event.setCancelled();
        }

    };

    @EventLink
    public final Listener<PreUpdateEvent> onPreUpdate = event -> {
        if (!getParent().deprecated.getValue()) {
            return;
        }

        if (mc.player.ticksExisted % ticksToDelay.getValue().intValue() == 0) {
            for (Packet<?> xX_packet_Xx : packetList) {
                PacketUtil.sendNoEvent(xX_packet_Xx);
                ChatUtil.display("LOLOL");

            }
            packetList.clear();
        }
    };

    @Override
    public void onEnable() {
        if (!getParent().deprecated.getValue()) {
            return;
        }
        if (!packetList.isEmpty()) {
            for (Packet<?> xX_packet_Xx : packetList) {
                PacketUtil.sendNoEvent(xX_packet_Xx);
            }
            packetList.clear();
        }
    }

    @Override
    public void onDisable() {
        if (!getParent().deprecated.getValue()) {
            return;
        }
        if (!packetList.isEmpty()) {
            for (Packet<?> xX_packet_Xx : packetList) {
                PacketUtil.sendNoEvent(xX_packet_Xx);
            }
            packetList.clear();
        }
    }
}